"""
Itertools module

* Python’s Itertool is a module that provides various functions that work on
  iterators to produce complex iterators.
* This module works as a fast, memory-efficient tool that is used either by
  themselves or in combination to form iterator algebra
* Different types of iterators provided by this module are:
  * Infinite iterators
  * Combinatoric iterators
  * Terminating iterators
"""
import itertools
import collections


###############################################################################
# Infinite iterators
###############################################################################


# count(start, step=1)
# * This iterator starts printing from the “start” number and prints infinitely
for n in itertools.count(5, 5):
    print(n)
    break
# 5, 10, 15, 20, 25...


# cycle(iterable)
# *  This iterator prints all values in order from the passed container. It
#    restarts printing from the beginning again when all elements are printed
#    in a cyclic manner
lst = ['A', 'B', 'C']
for i in itertools.cycle(lst):
    print(i)
    break
# A, B, C, A, B, C, A...


# repeat(val, num)
# * his iterator repeatedly prints the passed value infinite number of times.
#   If the optional keyword num is mentioned, then it repeatedly prints num
#   number of times
print(list(itertools.repeat(2, 5)))
# [2, 2, 2, 2, 2]


###############################################################################
# Combinatoric iterators
###############################################################################


# product(*iterables, repeat=1)
# * This tool computes the cartesian product of input iterables. To compute the
#   product of an iterable with itself, we use the optional repeat keyword
#   argument to specify the number of repetitions.
# * The output of this function are tuples in sorted order
print(list(itertools.product([1, 2], 'AB')))
# [(1, 'A'), (1, 'B'), (2, 'A'), (2, 'B')]


# permutations(iterable, r=None)
# * Is used to generate all possible permutations of an iterable. All elements
#   are treated as unique based on their position and not their values
# * This function takes an iterable and group_size, if the value of group_size
#   is not specified or is equal to None then the value of group_size becomes
#   length of the iterable
print(list(itertools.permutations([1, 2, 3])))
# [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]


# combinations(iterable, r)
# * This iterator prints all the possible combinations(without replacement) of
#   the container passed in arguments in the specified group size in sorted
#   order
print(list(itertools.combinations([1, 2, 3, 4], 2)))
# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]


# combinations_with_replacement(iterable, r)
# * This function returns a subsequence of length n from the elements of the
#   iterable where n is the argument that the function takes determining the
#   length of the subsequences generated by the function.
# * Individual elements may repeat itself in combinations_with_replacement
#   function
print(list(itertools.combinations_with_replacement([1, 2, 3], 2)))
# [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]


###############################################################################
# Terminating iterators
###############################################################################

